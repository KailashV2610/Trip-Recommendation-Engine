# -*- coding: utf-8 -*-
"""model_integration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UNO1Fs9oqWNRUUbYXgcJvgJkaKQ3oPaV
"""

import streamlit as st
import pickle
from sklearn.metrics import accuracy_score, classification_report
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from bs4 import BeautifulSoup
import joblib
from sklearn.metrics.pairwise import cosine_similarity
import base64
import urllib.parse

# place_choice_1 = []
# input_places = []
# input_type = []
# Load the saved machine learning model
logreg = joblib.load('logreg.pkl')

# Define the labels
label_c = ['Select your choice','Beach', 'City', 'Culture', 'Nature','Snow']
st.config.set_option("theme","dark")
# Create a Streamlit app
#st.set_page_config(page_title="Text Classification App", page_icon=":guardsman:", layout="wide")
#st.title('Text Classification App')
st.markdown(
"""
<style>
@font-face {
    font-family: 'outfit';
    src: url('Outfit-SemiBold.ttf');
}
</style>
""",
unsafe_allow_html=True
)
st.image("DestiNation_Logo_1.png", width=300, use_column_width=False)
st.write("<h1 style='font-family: outfit;font-size:20px'>Welcome to your ultimate trip planning site!</h1>", unsafe_allow_html=True)

# Define your video file
#video_file = open('bg_vid_1.mp4', 'rb')
#video_bytes = video_file.read()

# Define some CSS code for the background video
# st.markdown(
#     f"""    
#     <style>
#     .reportview-container {{
#         background: url(data:video/mp4;base64,{base64.b64encode(video_bytes).decode()}) no-repeat center center fixed;
#         -webkit-background-size: cover;
#         -moz-background-size: cover;
#         -o-background-size: cover;
#         background-size: cover;
#     }}
#     </style>
#     """,
#     unsafe_allow_html=True
# )

# Add a background video
#video_file = open('bg_vid.mp4', 'rb')
#video_bytes = video_file.read()
#st.video(video_bytes, start_time=0)

df = pd.read_csv('probability.csv')

# Create a dictionary of places and their classification probabilities
places = {}
for index, row in df.iterrows():
    index = row['Index']
    place_name = row['File_Name']
    probabilities = np.array([row['P_Beach'], row['P_City'], row['P_Culture'], row['P_Nature'], row['P_Snow']])
    label = row['Label']
    if label not in places:
        places[label] = {}
    places[label][place_name] = probabilities

def rec(input_places,input_type):
    input_probabilities = []
    for place in input_places:
        text = [place]
        input_probabilities.append(logreg.predict_proba(text))
    prob_in = [list(input_probabilities[0][0]),list(input_probabilities[1][0]),list(input_probabilities[2][0])]
    similarities = cosine_similarity(prob_in, df[['P_Beach', 'P_City', 'P_Culture', 'P_Nature', 'P_Snow']])
    top5_indices = np.argsort(similarities, axis=1)[:, -5:]
    top5_filenames = df.iloc[top5_indices.flatten()]['File_Name'].values.reshape(top5_indices.shape)
    place_choice_l = ['Select your choice']
    if(input_type == "Beach"):
      k=0
      for k in range(len(top5_filenames)):
        place_choice_l.append(top5_filenames[k][0])
    if(input_type == "City"):
      k=0
      for k in range(len(top5_filenames)):
        place_choice_l.append(top5_filenames[k][1])
    if(input_type == "Culture"):
      k=0
      for k in range(len(top5_filenames)):
        place_choice_l.append(top5_filenames[k][2])
    if(input_type == "Snow"):
      k=0
      for k in range(len(top5_filenames)):
        place_choice_l.append(top5_filenames[k][4])
    if(input_type == "Nature"):
      k=0
      for k in range(len(top5_filenames)):
        place_choice_l.append(top5_filenames[k][3])
    return place_choice_l

input_places = []
# Get input from the user
for i in range(3):
    place = st.text_input(f'Enter favorite place name ({i+1}): ')
    input_places.append(place)

input_type = st.selectbox("Choose your choice:",label_c)
# Classify the input using the machine learning model
if st.button('Classify'):
  st.experimental_set_query_params(input_places = input_places,input_type=input_type)
  st.experimental_rerun()
# else:
#    place_choice_1 = rec(input_places,input_type)
#    place_choice = st.selectbox("Choose your choice of place:",place_choice_1)
# st.write(place_choice)
query_params = st.experimental_get_query_params()
place_choice_1 = rec(input_places,input_type)
place_choice = st.selectbox("Choose your choice of place:",place_choice_1)
st.write(place_choice)


#if __name__ == '__main__':
#    app()